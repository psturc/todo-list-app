apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: e2e-test
spec:
  description: |
    An integration test.
  params:
    - description: Snapshot of the application
      name: SNAPSHOT
      default: '{"components": [{"name":"test-app", "containerImage": "quay.io/example/repo:latest"}]}'
      type: string
    - description: Path to the deployment YAML file
      name: deployment-file
      default: deploy/deployment.yaml
      type: string
  tasks:
    - name: test-metadata
      taskRef:
        resolver: git
        params:
          - name: url
            value: https://github.com/konflux-ci/tekton-integration-catalog.git
          - name: revision
            value: main
          - name: pathInRepo
            value: common/tasks/test-metadata/0.1/test-metadata.yaml
      params:
        - name: SNAPSHOT
          value: $(params.SNAPSHOT)
        - name: test-name
          value: $(context.pipelineRun.name)
    - name: sealights-get-refs
      runAfter:
        - test-metadata
      taskRef:
        resolver: git
        params:
          - name: url
            value: https://github.com/konflux-ci/tekton-integration-catalog.git
          - name: revision
            value: main
          - name: pathInRepo
            value: tasks/sealights/sealights-get-refs/0.1/sealights-get-refs.yaml
      params:
        - name: SNAPSHOT
          value: $(params.SNAPSHOT)
    - name: deploy
      runAfter:
        - sealights-get-refs
      taskSpec:
        results:
          - name: BASE_URL
            description: The base URL of the deployed service
        steps:
          - name: apply-deployment
            image: registry.redhat.io/openshift4/ose-cli:v4.15
            workingDir: /workspace
            env:
              - name: COMPONENT_IMAGE
                value: "$(tasks.sealights-get-refs.results.container-image)"
              - name: OC_LOGIN_COMMAND
                valueFrom:
                  secretKeyRef:
                    name: integration-pipeline-credentials
                    key: oc-login-command
              - name: SEALIGHTS_IMAGE_PULL_SECRET
                valueFrom:
                  secretKeyRef:
                    name: imagerepository-for-slpython-todo-todo-list-app-sealights-image-pull
                    key: .dockerconfigjson
            script: |
              #!/bin/sh
              set -eux

              yum install git -y

              BRANCH_NAME="$(tasks.test-metadata.results.target-repo-branch)"
              if [[ "$(tasks.test-metadata.results.test-event-type)" == "pull_request" ]]; then
                BRANCH_NAME="$(tasks.test-metadata.results.source-repo-branch)"
              fi
              git clone "$(tasks.test-metadata.results.git-url)" -b $BRANCH_NAME .

              eval $OC_LOGIN_COMMAND
              
              NS="todo-app-$(date +%s)"
              oc new-project $NS

              # Create the pull secret for pulling private instrumented container image
              echo $SEALIGHTS_IMAGE_PULL_SECRET > pull-secret.json
              oc create secret docker-registry sealights-pull-secret --from-file=.dockerconfigjson=pull-secret.json -n $NS
              oc secrets link default sealights-pull-secret --for=pull -n $NS

              # Apply & expose the deployment
              sed -i "s|\${IMAGE}|$COMPONENT_IMAGE|g" $(params.deployment-file)
              oc apply -f $(params.deployment-file) -n $NS
              oc expose deployment todo-app --type=ClusterIP --name=todo-list-app-service -n $NS

              # Create an OpenShift route
              cat <<EOF | oc apply -n $NS -f -
              apiVersion: route.openshift.io/v1
              kind: Route
              metadata:
                name: todo-list-app-route
              spec:
                to:
                  kind: Service
                  name: todo-list-app-service
                port:
                  targetPort: 5000  # Match the port the service exposes
              EOF

              # Wait for the route hostname to be available
              export ROUTE_HOST=""
              while [ -z "$ROUTE_HOST" ]; do
                ROUTE_HOST=$(oc get route todo-list-app-route -o jsonpath='{.spec.host}')
                sleep 10
              done

              oc wait --for=condition=ready pod -l app=todo-app -n $NS --timeout=5m

              export BASE_URL="http://${ROUTE_HOST}"
              echo "Application exposed at ${BASE_URL}"
              echo -n "${BASE_URL}" > /tekton/results/BASE_URL
    - name: run-robot-tests
      runAfter:
        - deploy
      taskSpec:
        steps:
          - name: run-robot-tests
            image: python:3.9-slim
            imagePullPolicy: Always
            workingDir: /workspace
            env:
              - name: BASE_URL
                value: "$(tasks.deploy.results.BASE_URL)"
              - name: SL_TOKEN
                valueFrom:
                  secretKeyRef:
                    name: sealights-credentials
                    key: token
              - name: BUILD_SESSION_ID
                value: $(tasks.sealights-get-refs.results.sealights-bsid)
              - name: PYTHONPATH
                value: "/app/sealights-integration-examples/robot-custom-integration/sl_python_robot"
            script: |
              #!/bin/sh
              set -eux
              
              if [ -z "$BASE_URL" ]; then
                  echo "Error: BASE_URL is not set!"
                  exit 1
              fi

              # Clone test repo
              apt-get update && apt-get install -y git && rm -rf /var/lib/apt/lists/
              BRANCH_NAME="$(tasks.test-metadata.results.target-repo-branch)"
              if [[ "$(tasks.test-metadata.results.test-event-type)" == "pull_request" ]]; then
                BRANCH_NAME="$(tasks.test-metadata.results.source-repo-branch)"
              fi
              git clone "$(tasks.test-metadata.results.git-url)" -b $BRANCH_NAME .
              
              # Install test dependencies
              pip install --no-cache-dir -r requirements.txt
              pip install --no-cache-dir -r robot_requirements.txt              
              pip install opentelemetry-exporter-otlp-proto-grpc

              # Install repo holding sl-python listener script (SLListener.py).
              git clone https://github.com/Sealights/sealights-integration-examples.git
              pip install sealights-integration-examples/robot-custom-integration/.

              # Run robot tests
              robot --listener sealights-integration-examples/robot-custom-integration/sl_python_robot/SLListener.py:"$SL_TOKEN":"$BUILD_SESSION_ID":Robot_Tests -v BASE_URL:"$BASE_URL" tests/integration_tests.robot
